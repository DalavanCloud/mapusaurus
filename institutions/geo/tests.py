import json

from django.core.urlresolvers import reverse
from django.test import TestCase

from .models import censustract_mapping, StateCensusTract


class StateCensusTractModelTest(TestCase):
    def test_census_tract_mapping(self):
        """ This mapping is generated by ogrinspect. This test ensures we
        don't inadvertently change it. Otherwise, data loading won't work. """

        for key, value in censustract_mapping.items():
            if key == 'geom':
                self.assertEqual(value, 'MULTIPOLYGON')
            else:
                self.assertEqual(key.upper(), value)

    def test_auto_populated(self):
        tract = StateCensusTract(
            statefp='00', countyfp='111', tractce='2222', geoid='001112222',
            name='name', namelsad='nameslad', mtfcc='G5020', funcstat='S',
            aland=2097335.0, awater=0.0, intptlat="15.1234",
            intptlon="-22.345",
            geom="MULTIPOLYGON(((0 0, 0 1, 1 1, 0 0), (2 2, 2 4, 4 4, 2 2)))")
        tract.save()
        self.assertEqual(tract.minlat, 0)
        self.assertEqual(tract.minlon, 0)
        self.assertEqual(tract.maxlat, 4)
        self.assertEqual(tract.maxlon, 4)
        tract.delete()

        tract = StateCensusTract(
            statefp='00', countyfp='111', tractce='2222', geoid='001112222',
            name='name', namelsad='nameslad', mtfcc='G5020', funcstat='S',
            aland=2097335.0, awater=0.0, intptlat="15.1234",
            intptlon="-22.345",
            geom=("MULTIPOLYGON(((0 0, 0 1, 1 1, 0 0), "
                    + "(2 2, -4 2, -4 2, 2 2)))"))
        tract.auto_fields()
        self.assertEqual(tract.minlat, 0)
        self.assertEqual(tract.minlon, -4)
        self.assertEqual(tract.maxlat, 2)
        self.assertEqual(tract.maxlon, 2)


class ViewTest(TestCase):
    fixtures = ['many_tracts']

    def test_tracts(self):
        resp = self.client.get(reverse('geo:tractsgeojson'),
                               {'state_fips': '11', 'county_fips': '222'})
        resp = json.loads(resp.content)
        features = resp['features']
        self.assertEqual(len(features), 4)

        ids = map(lambda feature: feature['properties']['geoid'], features)
        self.assertTrue('1122233300' in ids)
        self.assertTrue('1122233400' in ids)
        self.assertTrue('1122233500' in ids)
        self.assertTrue('1122233600' in ids)

    def test_tracts_page(self):
        resp = self.client.get(reverse('geo:tractsgeojson'),
                               {'state_fips': '11', 'county_fips': '222',
                                'page_size': 2, 'page_num': 1})
        resp = json.loads(resp.content)
        features = resp['features']
        self.assertEqual(len(features), 2)

        ids = map(lambda feature: feature['properties']['geoid'], features)
        self.assertTrue('1122233300' in ids)
        self.assertTrue('1122233400' in ids)

        resp = self.client.get(reverse('geo:tractsgeojson'),
                               {'state_fips': '11', 'county_fips': '222',
                                'page_size': 3, 'page_num': 2})
        resp = json.loads(resp.content)
        features = resp['features']
        self.assertEqual(len(features), 1)

        ids = map(lambda feature: feature['properties']['geoid'], features)
        self.assertTrue('1122233600' in ids)

        resp = self.client.get(reverse('geo:tractsgeojson'),
                               {'state_fips': '11', 'county_fips': '222',
                                'page_size': 5, 'page_num': 22})
        resp = json.loads(resp.content)
        features = resp['features']
        self.assertEqual(len(features), 0)

    def test_tracts_in_rect(self):
        resp = self.client.get(reverse('geo:tracts_in_rect'),
                               {'minlat': -10, 'minlon': -10,
                                'maxlat': 10, 'maxlon': 10})
        resp = json.loads(resp.content)
        self.assertEqual(len(resp['features']),
                         StateCensusTract.objects.all().count())

        resp = self.client.get(reverse('geo:tracts_in_rect'),
                               {'minlat': -10, 'minlon': -10,
                                'maxlat': -1, 'maxlon': -1})
        resp = json.loads(resp.content)
        self.assertEqual(len(resp['features']), 1)
