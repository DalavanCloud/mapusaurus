import json

from django.core.urlresolvers import reverse
from django.test import TestCase

from .models import censustract_mapping, StateCensusTract, Geo


class StateCensusTractModelTest(TestCase):
    def test_census_tract_mapping(self):
        """ This mapping is generated by ogrinspect. This test ensures we
        don't inadvertently change it. Otherwise, data loading won't work. """

        for key, value in censustract_mapping.items():
            if key == 'geom':
                self.assertEqual(value, 'MULTIPOLYGON')
            else:
                self.assertEqual(key.upper(), value)

    def test_auto_populated(self):
        tract = StateCensusTract(
            statefp='00', countyfp='111', tractce='2222', geoid='001112222',
            name='name', namelsad='nameslad', mtfcc='G5020', funcstat='S',
            aland=2097335.0, awater=0.0, intptlat="15.1234",
            intptlon="-22.345",
            geom="MULTIPOLYGON(((0 0, 0 1, 1 1, 0 0), (2 2, 2 4, 4 4, 2 2)))")
        tract.save()
        self.assertEqual(tract.minlat, 0)
        self.assertEqual(tract.minlon, 0)
        self.assertEqual(tract.maxlat, 4)
        self.assertEqual(tract.maxlon, 4)
        tract.delete()

        tract = StateCensusTract(
            statefp='00', countyfp='111', tractce='2222', geoid='001112222',
            name='name', namelsad='nameslad', mtfcc='G5020', funcstat='S',
            aland=2097335.0, awater=0.0, intptlat="15.1234",
            intptlon="-22.345",
            geom=("MULTIPOLYGON(((0 0, 0 1, 1 1, 0 0), "
                    + "(2 2, -4 2, -4 2, 2 2)))"))
        tract.auto_fields()
        self.assertEqual(tract.minlat, 0)
        self.assertEqual(tract.minlon, -4)
        self.assertEqual(tract.maxlat, 2)
        self.assertEqual(tract.maxlon, 2)
        geojson = json.loads(tract.geojson)
        self.assertEqual(geojson['type'], "Feature")
        self.assertEqual(geojson['properties']['statefp'], '00')
        self.assertEqual(geojson['properties']['countyfp'], '111')
        self.assertEqual(geojson['properties']['tractce'], '2222')
        self.assertEqual(geojson['properties']['geoid'], '001112222')
        self.assertEqual(geojson['properties']['name'], 'name')
        self.assertEqual(geojson['properties']['namelsad'], 'nameslad')
        self.assertEqual(geojson['geometry']['coordinates'],
                         [[[0, 0], [0, 1], [1, 1], [0, 0]],
                          [[2, 2], [-4, 2], [-4, 2], [2, 2]]])


class ViewTest(TestCase):
    fixtures = ['many_tracts']

    def setUp(self):
        """To avoid hand-typing escaped JSON, just generate each here"""
        for tract in Geo.objects.all():
            tract.save()

    def test_tract_tiles(self):
        # lat/lon roughly: 0 to 11
        resp = self.client.get(reverse(
            'geo:tract_tiles',
            kwargs={'zoom': 5, 'xtile': 16, 'ytile': 15}))
        resp = json.loads(resp.content)
        self.assertEqual(len(resp['features']),
                         # Doesn't grab the negative tract
                         Geo.objects.all().count() - 1)

        # lat/lon roughly: -6 to -3
        resp = self.client.get(reverse(
            'geo:tract_tiles',
            kwargs={'zoom': 7, 'xtile': 62, 'ytile': 65}))
        resp = json.loads(resp.content)
        self.assertEqual(len(resp['features']), 1)
